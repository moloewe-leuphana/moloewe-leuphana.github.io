"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5157],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(n),d=r,m=h["".concat(o,".").concat(d)]||h[d]||u[d]||l;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=h;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:1},s="Switch",i={unversionedId:"user-examples/switch",id:"user-examples/switch",title:"Switch",description:'We need a Switch tool that allows users to select between two strings: "light" and "dark". The selected string is',source:"@site/docs/user-examples/switch.md",sourceDirName:"user-examples",slug:"/user-examples/switch",permalink:"/docs/user-examples/switch",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Create a Survey",permalink:"/docs/user-examples/survey"},next:{title:"House Data Visualization",permalink:"/docs/user-examples/house_data"}},o={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"switch"},"Switch"),(0,r.kt)("p",null,'We need a Switch tool that allows users to select between two strings: "light" and "dark". The selected string is\neventually used to change the color mode of a Map from Light Mode to Dark Mode and vice-versa.'),(0,r.kt)("p",null,"The code snippet below represents the entirety of code that needs to be written to create one Switch that allows\nusers to select a value between ",(0,r.kt)("inlineCode",{parentName:"p"},'"light"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'"dark"'),"."),(0,r.kt)("p",null,"First, a global variable that stores a default value of the switch tool needs to be defined. In the example below,\nthe global variable is named ",(0,r.kt)("inlineCode",{parentName:"p"},"current_map_style"),' and the "default" or "initial" value that it contains is 20.\nAs such, ',(0,r.kt)("inlineCode",{parentName:"p"},'current_map_style = "light"')," even when the user has not interacted with the switch tool at all."),(0,r.kt)("p",null,"Second, under the class ",(0,r.kt)("inlineCode",{parentName:"p"},"tool_switch"),", a pair of ",(0,r.kt)("inlineCode",{parentName:"p"},"get_")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set_")," functions are defined. The ",(0,r.kt)("inlineCode",{parentName:"p"},"get_")," function is used\nto define the switch state based on the value stored in the global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"current_map_style"),". Whereas, the ",(0,r.kt)("inlineCode",{parentName:"p"},"set_"),"\nfunction is used by the system back-end to change value stored in the variable ",(0,r.kt)("inlineCode",{parentName:"p"},"current_map_style")," when a user makes\na selection using the switch. Note that the naming scheme between the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set_")," functions are consistent as\nthey both have the exact same name except the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set_")," prefixes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'global current_map_style\ncurrent_map_style = "light"\n\nclass tool_switch:\n    def get_change_map_style(self):\n        global current_map_style\n        if current_map_style == "light":\n            return True\n        else:\n            return False\n\n    def set_change_map_style(self, switch_state):\n        global current_map_style\n        if switch_state:\n            current_map_style = "light"\n        else:\n            current_map_style = "dark"\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"get_change_map_style")," function first calls the global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"current_map_style"),". This way, the value stored in\nthe global variable can be changed from within the local scope of the function. Then, the function returns a boolean\nvalue either ",(0,r.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"False")," based on the value currently stored in the global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"current_map_style"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"set_change_map_style")," is used by the MoL\xf6we back-end to pass the selection made by a user with the Switch tool.\nThis function contains a keyword argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"switch_state")," which is used by the MoL\xf6we back-end change the value\nstored in the global variable ",(0,r.kt)("inlineCode",{parentName:"p"},"current_map_style")," to a value that is different from the value initially stored in it\nbefore the switch was toggled by the user (as can be seen in the code within the function)."),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set_")," functions have been defined, a Switch tool can be placed on a slide by opening the slide in Edit Mode."),(0,r.kt)("p",null,"If another switch tool is required for the presentation, say one that lets users change line width of a different\nline in the plot, a new pair of get and set functions need to be defined under the class ",(0,r.kt)("inlineCode",{parentName:"p"},"tool_switch")," as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'global current_map_style\ncurrent_map_style = "light"\n\nglobal current_bulb_state\ncurrent_bulb_state = 0\n\nclass tool_switch:\n    # first switch\n    def get_change_map_style(self):\n        global current_map_style\n        if current_map_style == "light":\n            return True\n        else:\n            return False\n\n    def set_change_map_style(self, switch_state):\n        global current_map_style\n        if switch_state:\n            current_map_style = "light"\n        else:\n            current_map_style = "dark"\n\n    # second switch\n    def get_change_bulb_state(self):\n        global current_bulb_state\n        if current_bulb_state == 0:\n            return True\n        else:\n            return False\n    \n    def set_change_map_style(self, switch_state):\n        global current_bulb_state\n        if switch_state:\n            current_bulb_state = 0\n        else:\n            current_bulb_state = 1\n')))}u.isMDXComponent=!0}}]);